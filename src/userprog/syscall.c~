#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/init.h"
#include "threads/vaddr.h"
#include "userprog/process.h"
#include "filesys/filesys.h"
#include "filesys/file.h"
#include "threads/vaddr.h"
#include "threads/malloc.h"
#include "userprog/pagedir.h"





static int get_user (const uint8_t *uaddr);
static bool put_user (uint8_t *udst, uint8_t byte);
static void validate_read (const char *buffer, unsigned size);
static void validate_write (char *from, char *user_to, unsigned size, bool malloc_buffer);
static void validate_string (const char *string);

/* Terminates Pintos by calling power_off() (declared in "threads/init.h"). 
 This should be seldom used, because you lose some information about possible
 deadlock situations, etc.  */
static void halt (void) {
  shutdown_power_off ();
}

/* Terminates the current user program, returning status to the kernel. If 
  the process's parent waits for it (see below), this is the status that 
  will be returned. Conventionally, a status of 0 indicates success and 
  nonzero values indicate errors. */

void exit (int status) {
  struct thread *t = thread_current ();
  printf("%s: exit(%d)\n", t->name, status);
  thread_exit ();
  NOT_REACHED ();
}

/* Runs the executable whose name is given in cmd_line, passing any 
  given arguments, and returns the new process's program id (pid).
  Must return pid -1, which otherwise should not be a valid pid, 
  if the program cannot load or run for any reason. */
static int exec (const char *cmd_line) {
  validate_string (cmd_line);
  tid_t tid = process_execute (cmd_line);
  if (tid == TID_ERROR)
    return -1;
  return tid;
}

/* If process pid is still alive, waits until it dies. Then, returns
 the status that pid passed to exit, or -1 if pid was terminated by 
 the kernel (e.g. killed due to an exception). If pid does not refer 
 to a child of the calling thread, or if wait has already been 
 successfully called for the given pid, returns -1 immediately, 
 without waiting. */
static int wait (int pid){
  return process_wait (pid);
}



/* Writes size bytes from buffer to the open file fd. Returns the number of 
  bytes actually written, or -1 if the file could not be written. */
static int write (int fd, const void *buffer, unsigned size){
  validate_read(buffer, size);
  struct file *file;
  int result;
  
  if (fd == 1){
    putbuf (buffer, size);
    return size;
  }
  lock_acquire (&filesys_lock);
  result = file_write (file, buffer, size);
  lock_release (&filesys_lock);
  return result;
}


static void syscall_handler (struct intr_frame *);

void
syscall_init (void) 
{
  lock_init (&filesys_lock);
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f) 
{
  int *args = f->esp; args++;
  int return_val = f->eax;
  struct thread *cur = thread_current ();


  validate_read (f->esp, 1);

  cur->esp = f->esp;
  int sys_call = *((int *)f->esp);

  switch (sys_call){
    case SYS_HALT    : halt (); break;
    case SYS_EXIT    : validate_read ((char *)args, 1); exit (args[0]); break;
    case SYS_EXEC    : validate_read ((char *)args, 1); return_val = exec ((char *)args[0]); break;
    case SYS_WAIT    : validate_read ((char *)args, 1); return_val = wait (args[0]); break; 
    case SYS_WRITE   : validate_read ((char *)args, 3); return_val = write (args[0], (char *)args[1], args[2]); break;
    default: exit(-1);
  }

    
  //"return" the value back as though this were a function call
  f->eax=return_val;
}

static void
validate_string (const char * string) {
  size_t i;
  int val = -1;
  if (string == NULL) exit(-1);
  for(i = 0;val != 0;i++){
  if (string + i >= (char *)PHYS_BASE) exit(-1);
    val = get_user(string+i);
    if (val == -1) exit(-1);
  }
}

/* Validate reading from user memory */
static void 
validate_read (const char *buffer, unsigned size)
{
  unsigned count = 0;
  
  if (buffer + size >= (char *)PHYS_BASE)
    exit(-1);
  for (count = 0; count < size; count ++)
    if (get_user (buffer + count) == -1)
      exit(-1);
}

/* Validate writing to user memory */
static void 
validate_write (char *from, char *user_to, unsigned size, bool malloc_buffer)
{
  unsigned count;
  
  if (user_to + size >= (char *)PHYS_BASE)
  {
    if (malloc_buffer) free(from);
    exit(-1);   
  } 
  for (count = 0; count < size; count ++) {
    if (!put_user (user_to+count, *(from+count)))
    {
      if (malloc_buffer) free(from);      
      exit(-1);     
    } 
  }
}

/* Reads a byte at user virtual address UADDR.
   UADDR must be below PHYS_BASE.
   Returns the byte value if successful, -1 if a segfault
   occurred. */
static int
get_user (const uint8_t *uaddr)
{
  int result;
  asm ("movl $1f, %0; movzbl %1, %0; 1:"
       : "=&a" (result) : "m" (*uaddr));
  return result;
}

/* Writes BYTE to user address UDST.
   UDST must be below PHYS_BASE.
   Returns true if successful, false if a segfault occurred. */
static bool 
put_user (uint8_t *udst, uint8_t byte)
{
  int error_code;
  asm ("movl $1f, %0; movb %b2, %1; 1:"
       : "=&a" (error_code), "=m" (*udst) : "r" (byte));
  return error_code != -1;
}